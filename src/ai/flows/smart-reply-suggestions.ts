// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that provides smart reply suggestions for chat messages.
 *
 * - getSmartReplySuggestions - A function that generates smart reply suggestions.
 * - SmartReplySuggestionsInput - The input type for the getSmartReplySuggestions function.
 * - SmartReplySuggestionsOutput - The return type for the getSmartReplySuggestions function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const SmartReplySuggestionsInputSchema = z.object({
  messageHistory: z
    .array(z.string())
    .describe('The history of messages in the current conversation.'),
  currentMessage: z.string().describe('The current message to respond to.'),
});
export type SmartReplySuggestionsInput = z.infer<typeof SmartReplySuggestionsInputSchema>;

const SmartReplySuggestionsOutputSchema = z.object({
  suggestions: z
    .array(z.string())
    .describe('An array of smart reply suggestions for the current message.'),
});
export type SmartReplySuggestionsOutput = z.infer<typeof SmartReplySuggestionsOutputSchema>;

export async function getSmartReplySuggestions(
  input: SmartReplySuggestionsInput
): Promise<SmartReplySuggestionsOutput> {
  return smartReplySuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'smartReplySuggestionsPrompt',
  input: {
    schema: z.object({
      messageHistory: z
        .array(z.string())
        .describe('The history of messages in the current conversation.'),
      currentMessage: z.string().describe('The current message to respond to.'),
    }),
  },
  output: {
    schema: z.object({
      suggestions: z
        .array(z.string())
        .describe('An array of smart reply suggestions for the current message.'),
    }),
  },
  prompt: `You are an AI assistant that provides smart reply suggestions for chat messages.

  Given the following message history:
  {{#each messageHistory}}
  - {{{this}}}
  {{/each}}

  And the current message: {{{currentMessage}}}

  Provide 3 short and relevant reply suggestions.
  Do not include any explanation or context. Only the replies themselves.
  The replies should be appropriate for the context of the conversation.`,
});

const smartReplySuggestionsFlow = ai.defineFlow<
  typeof SmartReplySuggestionsInputSchema,
  typeof SmartReplySuggestionsOutputSchema
>(
  {
    name: 'smartReplySuggestionsFlow',
    inputSchema: SmartReplySuggestionsInputSchema,
    outputSchema: SmartReplySuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
